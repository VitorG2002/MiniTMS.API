// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniTMS.Dados.Contextos;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MiniTMS.Dados.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240228152912_CriacaoBdPostgres")]
    partial class CriacaoBdPostgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MiniTMS.Dominio.Cliente.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CnpjCpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj_cpf");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome_fantasia");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text")
                        .HasColumnName("razao_social");

                    b.HasKey("Id")
                        .HasName("pk_clientes");

                    b.HasIndex("CnpjCpf")
                        .IsUnique()
                        .HasDatabaseName("ix_clientes_cnpj_cpf");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("MiniTMS.Dominio.Destinatario.Destinatarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CnpjCpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj_cpf");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome_fantasia");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text")
                        .HasColumnName("razao_social");

                    b.HasKey("Id")
                        .HasName("pk_destinatarios");

                    b.HasIndex("CnpjCpf")
                        .IsUnique()
                        .HasDatabaseName("ix_destinatarios_cnpj_cpf");

                    b.ToTable("destinatarios", (string)null);
                });

            modelBuilder.Entity("MiniTMS.Dominio.Endereco.Enderecos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cidade");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Complemento")
                        .HasColumnType("text")
                        .HasColumnName("complemento");

                    b.Property<int?>("DestinatarioId")
                        .HasColumnType("integer")
                        .HasColumnName("destinatario_id");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endereco");

                    b.Property<int?>("EntregadorId")
                        .HasColumnType("integer")
                        .HasColumnName("entregador_id");

                    b.Property<int>("Numero")
                        .HasColumnType("integer")
                        .HasColumnName("numero");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("telefone");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("uf");

                    b.HasKey("Id")
                        .HasName("pk_enderecos");

                    b.HasIndex("ClienteId")
                        .IsUnique()
                        .HasDatabaseName("ix_enderecos_cliente_id");

                    b.HasIndex("DestinatarioId")
                        .IsUnique()
                        .HasDatabaseName("ix_enderecos_destinatario_id");

                    b.HasIndex("EntregadorId")
                        .IsUnique()
                        .HasDatabaseName("ix_enderecos_entregador_id");

                    b.ToTable("enderecos", (string)null);
                });

            modelBuilder.Entity("MiniTMS.Dominio.Entregador.Entregadores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Carro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("carro");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("placa");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("rg");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sobrenome");

                    b.HasKey("Id")
                        .HasName("pk_entregadores");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("ix_entregadores_cpf");

                    b.HasIndex("Rg")
                        .IsUnique()
                        .HasDatabaseName("ix_entregadores_rg");

                    b.ToTable("entregadores", (string)null);
                });

            modelBuilder.Entity("MiniTMS.Dominio.Pedido.Pedidos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientesId")
                        .HasColumnType("integer")
                        .HasColumnName("clientes_id");

                    b.Property<DateTime>("DataDeEntrega")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_de_entrega");

                    b.Property<DateTime>("DataDeEntregaPrevista")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_de_entrega_prevista");

                    b.Property<int>("DestinatariosId")
                        .HasColumnType("integer")
                        .HasColumnName("destinatarios_id");

                    b.Property<int>("EntregadoresId")
                        .HasColumnType("integer")
                        .HasColumnName("entregadores_id");

                    b.Property<double>("Frete")
                        .HasColumnType("double precision")
                        .HasColumnName("frete");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("pk_pedidos");

                    b.HasIndex("ClientesId")
                        .HasDatabaseName("ix_pedidos_clientes_id");

                    b.HasIndex("DestinatariosId")
                        .HasDatabaseName("ix_pedidos_destinatarios_id");

                    b.HasIndex("EntregadoresId")
                        .HasDatabaseName("ix_pedidos_entregadores_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_pedidos_status_id");

                    b.ToTable("pedidos", (string)null);
                });

            modelBuilder.Entity("MiniTMS.Dominio.Produto.Produtos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<double>("Peso")
                        .HasColumnType("double precision")
                        .HasColumnName("peso");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("pk_produtos");

                    b.ToTable("produtos", (string)null);
                });

            modelBuilder.Entity("MiniTMS.Dominio.Status.Statuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_status");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("ix_status_nome");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("PedidosProdutos", b =>
                {
                    b.Property<int>("PedidosId")
                        .HasColumnType("integer")
                        .HasColumnName("pedidos_id");

                    b.Property<int>("ProdutosId")
                        .HasColumnType("integer")
                        .HasColumnName("produtos_id");

                    b.HasKey("PedidosId", "ProdutosId")
                        .HasName("pk_pedidos_produtos");

                    b.HasIndex("ProdutosId")
                        .HasDatabaseName("ix_pedidos_produtos_produtos_id");

                    b.ToTable("pedidos_produtos", (string)null);
                });

            modelBuilder.Entity("MiniTMS.Dominio.Endereco.Enderecos", b =>
                {
                    b.HasOne("MiniTMS.Dominio.Cliente.Clientes", "Cliente")
                        .WithOne("Endereco")
                        .HasForeignKey("MiniTMS.Dominio.Endereco.Enderecos", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_enderecos_clientes_cliente_id");

                    b.HasOne("MiniTMS.Dominio.Destinatario.Destinatarios", "Destinatario")
                        .WithOne("Endereco")
                        .HasForeignKey("MiniTMS.Dominio.Endereco.Enderecos", "DestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_enderecos_destinatarios_destinatario_id");

                    b.HasOne("MiniTMS.Dominio.Entregador.Entregadores", "Entregador")
                        .WithOne("Endereco")
                        .HasForeignKey("MiniTMS.Dominio.Endereco.Enderecos", "EntregadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_enderecos_entregadores_entregador_id");

                    b.Navigation("Cliente");

                    b.Navigation("Destinatario");

                    b.Navigation("Entregador");
                });

            modelBuilder.Entity("MiniTMS.Dominio.Pedido.Pedidos", b =>
                {
                    b.HasOne("MiniTMS.Dominio.Cliente.Clientes", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClientesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_pedidos_clientes_clientes_id");

                    b.HasOne("MiniTMS.Dominio.Destinatario.Destinatarios", "Destinatario")
                        .WithMany("Pedidos")
                        .HasForeignKey("DestinatariosId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_pedidos_destinatarios_destinatarios_id");

                    b.HasOne("MiniTMS.Dominio.Entregador.Entregadores", "Entregador")
                        .WithMany("Pedidos")
                        .HasForeignKey("EntregadoresId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_pedidos_entregadores_entregadores_id");

                    b.HasOne("MiniTMS.Dominio.Status.Statuses", "Status")
                        .WithMany("Pedidos")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_pedidos_status_status_id");

                    b.Navigation("Cliente");

                    b.Navigation("Destinatario");

                    b.Navigation("Entregador");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PedidosProdutos", b =>
                {
                    b.HasOne("MiniTMS.Dominio.Pedido.Pedidos", null)
                        .WithMany()
                        .HasForeignKey("PedidosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pedidos_produtos_pedidos_pedidos_id");

                    b.HasOne("MiniTMS.Dominio.Produto.Produtos", null)
                        .WithMany()
                        .HasForeignKey("ProdutosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pedidos_produtos_produtos_produtos_id");
                });

            modelBuilder.Entity("MiniTMS.Dominio.Cliente.Clientes", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("MiniTMS.Dominio.Destinatario.Destinatarios", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("MiniTMS.Dominio.Entregador.Entregadores", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("MiniTMS.Dominio.Status.Statuses", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
